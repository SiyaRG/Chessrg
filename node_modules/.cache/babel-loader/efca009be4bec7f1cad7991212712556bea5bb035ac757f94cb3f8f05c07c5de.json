{"ast":null,"code":"import React from \"react\";\nconst checkState = board => {\n  const winningSequences = [[0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 4, 8], [2, 4, 6]];\n  //Check X\n  let state = \"\";\n  winningSequences.forEach(sequence => {\n    let count = 0;\n    sequence.forEach(square => {\n      if (board[sqaure] === \"X\") {\n        count++;\n      }\n    });\n    if (count === 3) {\n      state = \"X\";\n    }\n  });\n  if (state === \"\") {\n    winningSequences.forEach(sequence => {\n      let count = 0;\n      sequence.forEach(square => {\n        if (board[sqaure] === \"O\") {\n          count++;\n        }\n      });\n      if (count === 3) {\n        state = \"O\";\n      }\n    });\n  }\n  if (state === \"\") {\n    board.forEach(square => {\n      if (square !== \"O\" && square !== \"X\") {\n        state = \"Live\";\n      }\n    });\n  }\n  if (state === \"\") {\n    state = \"Live\";\n  }\n  return state;\n};\nconst isValidMove = (board, move) => {\n  if (board[move - 1] === \"X\" || board[move - 1 === \"O\"]) {\n    return false;\n  } else {\n    return true;\n  }\n};\nmodule.exports = {\n  checkState,\n  isValidMove\n};","map":{"version":3,"names":["React","checkState","board","winningSequences","state","forEach","sequence","count","square","sqaure","isValidMove","move","module","exports"],"sources":["/data/data/com.termux/files/home/storage/projects/siya-app/src/GameLogic/Adjudicator.jsx"],"sourcesContent":["import React from \"react\";\n\nconst checkState = board => {\n\tconst winningSequences = [\n\t\t[0, 3, 6],\n\t\t[1, 4, 7],\n\t\t[2, 5, 8],\n\t\t[0, 1, 2],\n\t\t[3, 4, 5],\n\t\t[6, 7, 8],\n\t\t[0, 4, 8],\n\t\t[2, 4, 6]\n\t];\n\t//Check X\n\tlet state = \"\";\n\twinningSequences.forEach(sequence => {\n\t\tlet count = 0;\n\t\tsequence.forEach(square => {\n\t\t\tif (board[sqaure] === \"X\") {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t});\n\t\tif (count === 3) {\n\t\t\tstate = \"X\";\n\t\t}\n\t});\n\tif (state === \"\") {\n\t\twinningSequences.forEach(sequence => {\n\t\t\tlet count = 0;\n\t\t\tsequence.forEach(square => {\n\t\t\t\tif (board[sqaure] === \"O\") {\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t});\n\t\t\tif (count === 3) {\n\t\t\t\tstate = \"O\";\n\t\t\t}\n\t\t});\n\t}\n\tif (state === \"\") {\n\t\tboard.forEach(square => {\n\t\t\tif (square !== \"O\" && square !== \"X\") {\n\t\t\t\tstate = \"Live\";\n\t\t\t}\n\t\t});\n\t}\n\tif (state === \"\") {\n\t\tstate = \"Live\";\n\t}\n\treturn state;\n};\nconst isValidMove = (board, move) => {\n  if(board[move-1]===\"X\"||board[move-1===\"O\"])\n  {\n    return false\n  }else{\n    return true\n  }\n};\n\nmodule.exports = { checkState, isValidMove };\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,UAAU,GAAGC,KAAK,IAAI;EAC3B,MAAMC,gBAAgB,GAAG,CACxB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EACT,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EACT,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EACT,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EACT,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EACT,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EACT,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EACT,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CACT;EACD;EACA,IAAIC,KAAK,GAAG,EAAE;EACdD,gBAAgB,CAACE,OAAO,CAACC,QAAQ,IAAI;IACpC,IAAIC,KAAK,GAAG,CAAC;IACbD,QAAQ,CAACD,OAAO,CAACG,MAAM,IAAI;MAC1B,IAAIN,KAAK,CAACO,MAAM,CAAC,KAAK,GAAG,EAAE;QAC1BF,KAAK,EAAE;MACR;IACD,CAAC,CAAC;IACF,IAAIA,KAAK,KAAK,CAAC,EAAE;MAChBH,KAAK,GAAG,GAAG;IACZ;EACD,CAAC,CAAC;EACF,IAAIA,KAAK,KAAK,EAAE,EAAE;IACjBD,gBAAgB,CAACE,OAAO,CAACC,QAAQ,IAAI;MACpC,IAAIC,KAAK,GAAG,CAAC;MACbD,QAAQ,CAACD,OAAO,CAACG,MAAM,IAAI;QAC1B,IAAIN,KAAK,CAACO,MAAM,CAAC,KAAK,GAAG,EAAE;UAC1BF,KAAK,EAAE;QACR;MACD,CAAC,CAAC;MACF,IAAIA,KAAK,KAAK,CAAC,EAAE;QAChBH,KAAK,GAAG,GAAG;MACZ;IACD,CAAC,CAAC;EACH;EACA,IAAIA,KAAK,KAAK,EAAE,EAAE;IACjBF,KAAK,CAACG,OAAO,CAACG,MAAM,IAAI;MACvB,IAAIA,MAAM,KAAK,GAAG,IAAIA,MAAM,KAAK,GAAG,EAAE;QACrCJ,KAAK,GAAG,MAAM;MACf;IACD,CAAC,CAAC;EACH;EACA,IAAIA,KAAK,KAAK,EAAE,EAAE;IACjBA,KAAK,GAAG,MAAM;EACf;EACA,OAAOA,KAAK;AACb,CAAC;AACD,MAAMM,WAAW,GAAGA,CAACR,KAAK,EAAES,IAAI,KAAK;EACnC,IAAGT,KAAK,CAACS,IAAI,GAAC,CAAC,CAAC,KAAG,GAAG,IAAET,KAAK,CAACS,IAAI,GAAC,CAAC,KAAG,GAAG,CAAC,EAC3C;IACE,OAAO,KAAK;EACd,CAAC,MAAI;IACH,OAAO,IAAI;EACb;AACF,CAAC;AAEDC,MAAM,CAACC,OAAO,GAAG;EAAEZ,UAAU;EAAES;AAAY,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}