{"ast":null,"code":"export const BFS = (tree, rootNode, destination, visited = [], queue = [rootNode]) => {\n  if (visited.indexOf(rootNode) !== -1) {\n    queue.shift();\n    rootNode = queue[0];\n  } else {\n    visited.push(rootNode);\n  }\n  queue.push(...tree[Number(rootNode)]);\n  queue.shift();\n  if (rootNode === destination) {\n    return {\n      found: true,\n      checked: visited\n    };\n  } else if (queue.length === 0) {\n    return {\n      found: false,\n      checked: visited\n    };\n  } else {\n    return BFS(tree, queue[0], destination, visited, queue);\n  }\n};\n_c = BFS;\nexport const DFS = (tree, rootNode, destination, visited = [], stack = [rootNode]) => {\n  if (visited.indexOf(rootNode) !== -1) {\n    stack.shift();\n    rootNode = stack[0];\n  } else {\n    visited.push(rootNode);\n  }\n  stack.unshift(...tree[rootNode]);\n  stack.shift();\n  if (rootNode === destination) {\n    return {\n      found: true,\n      checked: [...visited]\n    };\n  } else if (stack.length === 0) {\n    return {\n      found: false,\n      checked: [...visited]\n    };\n  } else {\n    return BFS(tree, stack[0], destination, visited, stack);\n  }\n};\n_c2 = DFS;\nexport const Djk = (graph, rootNode, destination, queue = [rootNode]) => {\n  rootNode.value = 0;\n  while (queue.length !== 0) {\n    queue.pop();\n    rootNode.cildren.forEach(child => {\n      if (graph[child[0]].value > rootNode.value + child[1]) {\n        graph[child[0]].value = rootNode.value + child[1];\n        graph[child[0]].sequence = [...rootNode.sequence, rootNode.name];\n        if (queue.indexOf(child[0]) !== -1) {\n          queue.push(child[0]);\n        }\n      }\n    });\n  }\n  return destination.seqence;\n};\n\n/*\n                  1 \n               5     8 \n             13 6 0 7  11\n              20\n             3\n          \n          {\n            1: [[5,17],[8,3]],\n            5: [[13,7],[6,1],[1,17]],\n            8 :[[7,5],[11,1],[1,3]],\n            13:[[20,1],[5,7],\n            6: [[20,5],[0,3],[5,1]],\n            0: [[6,3],[7,1]],\n            7: [[0,1],[11,4]],\n            11: [[8,1],[7,4]],\n            20: [[13,1],[6,5],[3,27]],\n            3: [[20,27]]\n          }\n         .....\n         object: \n         rootNode: \n         currentNode: \n         queue: \n         \n         1: {0,[1]}\n         5:{13,[1,8,7,0,6,5]}\n         8:{3,[1,8]}\n         13:{18,[1,8,7,0,6,20,13]}\n         6:{12,[1,8,7,0,6]}\n         7: {8,[1,8,7]}\n         11: {4,[1,8,11]}\n         20: {17,[1,8,7,0,6,20]}\n         0: {9,[1,8,7,0]}\n         3: {44,[1,8,7,0,6,20]}\n         \n         \n        while queue !empty\n         check if (current dist + difference) < child distance\n          {\n            update child value\n            child sequenc= [...parentSeq,child]\n          if not in queue  add Child to queue\n          }\n          return object[destination]\n          ...........\n          \n         \n */\n_c3 = Djk;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"BFS\");\n$RefreshReg$(_c2, \"DFS\");\n$RefreshReg$(_c3, \"Djk\");","map":{"version":3,"names":["BFS","tree","rootNode","destination","visited","queue","indexOf","shift","push","Number","found","checked","length","_c","DFS","stack","unshift","_c2","Djk","graph","value","pop","cildren","forEach","child","sequence","name","seqence","_c3","$RefreshReg$"],"sources":["/data/data/com.termux/files/home/storage/projects/siya-app/src/Algorithms/Algorithms.js"],"sourcesContent":["export const BFS = (\n\ttree,\n\trootNode,\n\tdestination,\n\tvisited = [],\n\tqueue = [rootNode]\n) => {\n\tif (visited.indexOf(rootNode) !== -1) {\n\t\tqueue.shift();\n\t\trootNode = queue[0];\n\t} else {\n\t\tvisited.push(rootNode);\n\t}\n\n\tqueue.push(...tree[Number(rootNode)]);\n\tqueue.shift();\n\tif (rootNode === destination) {\n\t\treturn { found: true, checked: visited };\n\t} else if (queue.length === 0) {\n\t\treturn { found: false, checked: visited };\n\t} else {\n\t\treturn BFS(tree, queue[0], destination, visited, queue);\n\t}\n};\n\nexport const DFS = (\n\ttree,\n\trootNode,\n\tdestination,\n\tvisited = [],\n\tstack = [rootNode]\n) => {\n\tif (visited.indexOf(rootNode) !== -1) {\n\t\tstack.shift();\n\t\trootNode = stack[0];\n\t} else {\n\t\tvisited.push(rootNode);\n\t}\n\n\tstack.unshift(...tree[rootNode]);\n\tstack.shift();\n\tif (rootNode === destination) {\n\t\treturn { found: true, checked: [...visited] };\n\t} else if (stack.length === 0) {\n\t\treturn { found: false, checked: [...visited] };\n\t} else {\n\t\treturn BFS(tree, stack[0], destination, visited, stack);\n\t}\n};\nexport const Djk = (graph, rootNode, destination, queue = [rootNode]) => {\n\trootNode.value = 0;\n\twhile (queue.length !== 0) {\n\t\tqueue.pop();\n\t\trootNode.cildren.forEach(child => {\n\t\t\tif (graph[child[0]].value > rootNode.value + child[1]) {\n\t\t\t\tgraph[child[0]].value = rootNode.value + child[1];\n\t\t\t\tgraph[child[0]].sequence = [\n\t\t\t\t\t...rootNode.sequence,\n\t\t\t\t\trootNode.name\n\t\t\t\t];\n\t\t\t\tif (queue.indexOf(child[0]) !== -1) {\n\t\t\t\t\tqueue.push(child[0]);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\treturn destination.seqence;\n};\n\n/*\n                  1 \n               5     8 \n             13 6 0 7  11\n              20\n             3\n          \n          {\n            1: [[5,17],[8,3]],\n            5: [[13,7],[6,1],[1,17]],\n            8 :[[7,5],[11,1],[1,3]],\n            13:[[20,1],[5,7],\n            6: [[20,5],[0,3],[5,1]],\n            0: [[6,3],[7,1]],\n            7: [[0,1],[11,4]],\n            11: [[8,1],[7,4]],\n            20: [[13,1],[6,5],[3,27]],\n            3: [[20,27]]\n          }\n         .....\n         object: \n         rootNode: \n         currentNode: \n         queue: \n         \n         1: {0,[1]}\n         5:{13,[1,8,7,0,6,5]}\n         8:{3,[1,8]}\n         13:{18,[1,8,7,0,6,20,13]}\n         6:{12,[1,8,7,0,6]}\n         7: {8,[1,8,7]}\n         11: {4,[1,8,11]}\n         20: {17,[1,8,7,0,6,20]}\n         0: {9,[1,8,7,0]}\n         3: {44,[1,8,7,0,6,20]}\n         \n         \n        while queue !empty\n         check if (current dist + difference) < child distance\n          {\n            update child value\n            child sequenc= [...parentSeq,child]\n          if not in queue  add Child to queue\n          }\n          return object[destination]\n          ...........\n          \n         \n */\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}