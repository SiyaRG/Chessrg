{"ast":null,"code":"import React from \"react\";\nexport const checkState = board => {\n  const winningSequences = [[0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 4, 8], [2, 4, 6]];\n  //Check X\n  let state = \"\";\n  let seq = null;\n  winningSequences.forEach(sequence => {\n    let count = 0;\n    sequence.forEach(square => {\n      if (board[square] === \"X\") {\n        count++;\n      }\n    });\n    if (count === 3) {\n      state = \"X\";\n      seq = [...sequence];\n    }\n  });\n  if (state === \"\") {\n    winningSequences.forEach(sequence => {\n      let count = 0;\n      sequence.forEach(square => {\n        if (board[square] === \"O\") {\n          count++;\n        }\n      });\n      if (count === 3) {\n        state = \"O\";\n        seq = [...sequence];\n      }\n    });\n  }\n  if (state === \"\") {\n    board.forEach(square => {\n      if (square !== \"O\" && square !== \"X\") {\n        state = \"Live\";\n      }\n    });\n  }\n  if (state === \"\") {\n    state = \"Draw\";\n  }\n  return [state, seq];\n};\nexport const isValidMove = (board, move) => {\n  if (board[move] === \"X\" || board[move] === \"O\") {\n    return false;\n  } else {\n    return true;\n  }\n};\n\n//AI\nconst minimax = (board, depth, maxDepth, max) => {\n  if (depth > maxDepth) return 0;\n  if (checkState(board)[0] === \"X\") {\n    return -10;\n  } else if (checkState(board)[0] === \"O\") {\n    return 10;\n  } else if (checkState(board)[0] === \"Draw\") {\n    return 0;\n  } else {\n    if (max) {\n      let bestValue = -100;\n      board.forEach(square => {\n        if (square !== \"X\" && square !== \"O\") {\n          board[square - 1] = \"O\";\n          bestValue = Math.max(bestValue, minimax(board, depth + 1, maxDepth, !max) - depth);\n          board[square - 1] = square;\n        }\n      });\n      return bestValue;\n    } else {\n      let bestValue = 100;\n      board.forEach(square => {\n        if (square !== \"X\" && square !== \"O\") {\n          board[square - 1] = \"X\";\n          bestValue = Math.min(bestValue - depth, minimax(board, depth + 1, maxDepth, !max));\n          board[square - 1] = square;\n        }\n      });\n      return bestValue;\n    }\n  }\n};\nexport const getEngineMove = (board, mode) => {\n  let maxValue = -100;\n  let bestMove = -1;\n  let depth = 2;\n  if (mode === \"Medium\") {\n    depth = 5;\n  } else if (mode === \"Hard\") {\n    depth = 99;\n  }\n  board.forEach(square => {\n    if (square !== \"X\" && square !== \"O\") {\n      board[square - 1] = \"O\";\n      let Value = minimax(board, 0, depth, false);\n      board[square - 1] = square;\n      if (maxValue < Value) {\n        maxValue = Value;\n        bestMove = square;\n      }\n    }\n  });\n  return bestMove;\n};","map":{"version":3,"names":["React","checkState","board","winningSequences","state","seq","forEach","sequence","count","square","isValidMove","move","minimax","depth","maxDepth","max","bestValue","Math","min","getEngineMove","mode","maxValue","bestMove","Value"],"sources":["/data/data/com.termux/files/home/storage/projects/siya-app/src/GameLogic/Engine.js"],"sourcesContent":["import React from \"react\";\n\nexport const checkState = board => {\n\tconst winningSequences = [\n\t\t[0, 3, 6],\n\t\t[1, 4, 7],\n\t\t[2, 5, 8],\n\t\t[0, 1, 2],\n\t\t[3, 4, 5],\n\t\t[6, 7, 8],\n\t\t[0, 4, 8],\n\t\t[2, 4, 6]\n\t];\n\t//Check X\n\tlet state = \"\";\n\tlet seq = null;\n\twinningSequences.forEach(sequence => {\n\t\tlet count = 0;\n\t\tsequence.forEach(square => {\n\t\t\tif (board[square] === \"X\") {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t});\n\t\tif (count === 3) {\n\t\t\tstate = \"X\";\n\t\t\tseq = [...sequence];\n\t\t}\n\t});\n\tif (state === \"\") {\n\t\twinningSequences.forEach(sequence => {\n\t\t\tlet count = 0;\n\t\t\tsequence.forEach(square => {\n\t\t\t\tif (board[square] === \"O\") {\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t});\n\t\t\tif (count === 3) {\n\t\t\t\tstate = \"O\";\n\t\t\t\tseq = [...sequence];\n\t\t\t}\n\t\t});\n\t}\n\tif (state === \"\") {\n\t\tboard.forEach(square => {\n\t\t\tif (square !== \"O\" && square !== \"X\") {\n\t\t\t\tstate = \"Live\";\n\t\t\t}\n\t\t});\n\t}\n\tif (state === \"\") {\n\t\tstate = \"Draw\";\n\t}\n\treturn [state, seq];\n};\n\nexport const isValidMove = (board, move) => {\n\tif (board[move] === \"X\" || board[move] === \"O\") {\n\t\treturn false;\n\t} else {\n\t\treturn true;\n\t}\n};\n\n//AI\nconst minimax = (board, depth, maxDepth, max) => {\n\tif (depth > maxDepth) return 0;\n\tif (checkState(board)[0] === \"X\") {\n\t\treturn -10;\n\t} else if (checkState(board)[0] === \"O\") {\n\t\treturn 10;\n\t} else if (checkState(board)[0] === \"Draw\") {\n\t\treturn 0;\n\t} else {\n\t\tif (max) {\n\t\t\tlet bestValue = -100;\n\t\t\tboard.forEach(square => {\n\t\t\t\tif (square !== \"X\" && square !== \"O\") {\n\t\t\t\t\tboard[square - 1] = \"O\";\n\t\t\t\t\tbestValue = Math.max(\n\t\t\t\t\t\tbestValue,\n\t\t\t\t\t\tminimax(board, depth + 1, maxDepth, !max) - depth\n\t\t\t\t\t);\n\t\t\t\t\tboard[square - 1] = square;\n\t\t\t\t}\n\t\t\t});\n\t\t\treturn bestValue;\n\t\t} else {\n\t\t\tlet bestValue = 100;\n\t\t\tboard.forEach(square => {\n\t\t\t\tif (square !== \"X\" && square !== \"O\") {\n\t\t\t\t\tboard[square - 1] = \"X\";\n\t\t\t\t\tbestValue = Math.min(\n\t\t\t\t\t\tbestValue - depth,\n\t\t\t\t\t\tminimax(board, depth + 1, maxDepth, !max)\n\t\t\t\t\t);\n\t\t\t\t\tboard[square - 1] = square;\n\t\t\t\t}\n\t\t\t});\n\t\t\treturn bestValue;\n\t\t}\n\t}\n};\nexport const getEngineMove = (board, mode) => {\n\tlet maxValue = -100;\n\tlet bestMove = -1;\n\tlet depth = 2;\n\tif (mode === \"Medium\") {\n\t\tdepth = 5;\n\t} else if (mode === \"Hard\") {\n\t\tdepth = 99;\n\t}\n\tboard.forEach(square => {\n\t\tif (square !== \"X\" && square !== \"O\") {\n\t\t\tboard[square - 1] = \"O\";\n\t\t\tlet Value = minimax(board, 0, depth, false);\n\t\t\tboard[square - 1] = square;\n\n\t\t\tif (maxValue < Value) {\n\t\t\t\tmaxValue = Value;\n\t\t\t\tbestMove = square;\n\t\t\t}\n\t\t}\n\t});\n\treturn bestMove;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}